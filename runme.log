+ ./BitEpi.o -i sampleData/data.csv -o sampleData/out -t 2 -b1 0 -b2 0 -b3 0 -b4 0 -a1 0 -a2 0 -a3 0 -a4 0 -sort

=============Start=============




=========================================

 Given Arguments:

 input                sampleData/data.csv
 output               sampleData/out
 threads              2
 sort
 beta1                0.000000
 alpha1               0.000000
 beta2                0.000000
 alpha2               0.000000
 beta3                0.000000
 alpha3               0.000000
 beta4                0.000000
 alpha4               0.000000

=========================================


loading dataset sampleData/data.csv
Counting lines in sampleData/data.csv

There are       51 lines    in sampleData/data.csv
There are       50 SNPs     in sampleData/data.csv
There are     4000 samples  in sampleData/data.csv
There are     2000 Cases    in sampleData/data.csv
There are     2000 Controls in sampleData/data.csv

Purity of the whole dataset is 0.500000 (baseline for Beta)

Shift dataset by 2 bits compeleted
Shift dataset by 4 bits compeleted
Shift dataset by 6 bits compeleted

>>>>>>>>>> Process jobs [0..1] in parallel of 1th order analysis

>>>>> Identify the index range of the outer-loop for each job such that each job tests the same number of combinations (approximately)
Total number of combinations to be tested:                                   50
Average number of combintions to be tested in each job:                      25


         Job ID          Start            End   Combinations (to be tested in this job)
              0              0              7             28
              1              8             49             22
<<<<<
Thread    0 Job    0 starting ... [from:              0 to:              7][             28 combinations]
Thread    0 Finish
Thread    1 Job    1 starting ... [from:              8 to:             49][             22 combinations]
Thread    1 Finish
<<<<<<<<< Takes          0 seconds



>>>>>>>>>> Process jobs [0..1] in parallel of 2th order analysis

>>>>> Identify the index range of the outer-loop for each job such that each job tests the same number of combinations (approximately)
Total number of combinations to be tested:                                 1225
Average number of combintions to be tested in each job:                     612


         Job ID          Start            End   Combinations (to be tested in this job)
              0              1             34            595
              1             35             49            630
<<<<<
Thread    0 Job    0 starting ... [from:              1 to:             34][            595 combinations]
Thread    1 Job    1 starting ... [from:             35 to:             49][            630 combinations]
Thread    1 Finish
Thread    0 Finish
<<<<<<<<< Takes          0 seconds



>>>>>>>>>> Process jobs [0..1] in parallel of 3th order analysis

>>>>> Identify the index range of the outer-loop for each job such that each job tests the same number of combinations (approximately)
Total number of combinations to be tested:                                19600
Average number of combintions to be tested in each job:                    9800


         Job ID          Start            End   Combinations (to be tested in this job)
              0              2             39           9881
              1             40             49           9719
<<<<<
Thread    0 Job    0 starting ... [from:              2 to:             39][           9881 combinations]
Thread    1 Job    1 starting ... [from:             40 to:             49][           9719 combinations]
Thread    1 Finish
Thread    0 Finish
<<<<<<<<< Takes          0 seconds



>>>>>>>>>> Process jobs [0..1] in parallel of 4th order analysis

>>>>> Identify the index range of the outer-loop for each job such that each job tests the same number of combinations (approximately)
Total number of combinations to be tested:                               230300
Average number of combintions to be tested in each job:                  115150


         Job ID          Start            End   Combinations (to be tested in this job)
              0              3             41         111932
              1             42             49         118368
<<<<<
Thread    0 Job    0 starting ... [from:              3 to:             41][         111932 combinations]
Thread    1 Job    1 starting ... [from:             42 to:             49][         118368 combinations]
Thread    1 Finish
Thread    0 Finish
<<<<<<<<< Takes          1 seconds



***Merge output of multiple threads (stored in separate files). In Linux it uses command line operation (also echo commands in stdout). In Windows it only merge the best output file.


Merge Beta1 files...

>>> cat sampleData/out.Beta.1.*.csv | sort -g -r -k1,1 -t ',' | awk 'BEGIN{print("Alpha,SNP_A")}{print}' > sampleData/out.Beta.1.csv

>>> rm sampleData/out.Beta.1.*.csv

Merge Alpha1 files...

>>> cat sampleData/out.Alpha.1.*.csv | sort -g -r -k1,1 -t ',' | awk 'BEGIN{print("Alpha,SNP_A")}{print}' > sampleData/out.Alpha.1.csv

>>> rm sampleData/out.Alpha.1.*.csv

Merge Beta2 files...

>>> cat sampleData/out.Beta.2.*.csv | sort -g -r -k1,1 -t ',' | awk 'BEGIN{print("Alpha,SNP_A,SNP_B")}{print}' > sampleData/out.Beta.2.csv

>>> rm sampleData/out.Beta.2.*.csv

Merge Alpha2 files...

>>> cat sampleData/out.Alpha.2.*.csv | sort -g -r -k1,1 -t ',' | awk 'BEGIN{print("Alpha,SNP_A,SNP_B")}{print}' > sampleData/out.Alpha.2.csv

>>> rm sampleData/out.Alpha.2.*.csv

Merge Beta3 files...

>>> cat sampleData/out.Beta.3.*.csv | sort -g -r -k1,1 -t ',' | awk 'BEGIN{print("Alpha,SNP_A,SNP_B,SNP_C")}{print}' > sampleData/out.Beta.3.csv

>>> rm sampleData/out.Beta.3.*.csv

Merge Alpha3 files...

>>> cat sampleData/out.Alpha.3.*.csv | sort -g -r -k1,1 -t ',' | awk 'BEGIN{print("Alpha,SNP_A,SNP_B,SNP_C")}{print}' > sampleData/out.Alpha.3.csv

>>> rm sampleData/out.Alpha.3.*.csv

Merge Beta4 files...

>>> cat sampleData/out.Beta.4.*.csv | sort -g -r -k1,1 -t ',' | awk 'BEGIN{print("Alpha,SNP_A,SNP_B,SNP_C,SNP_D")}{print}' > sampleData/out.Beta.4.csv

>>> rm sampleData/out.Beta.4.*.csv

Merge Alpha4 files...

>>> cat sampleData/out.Alpha.4.*.csv | sort -g -r -k1,1 -t ',' | awk 'BEGIN{print("Alpha,SNP_A,SNP_B,SNP_C,SNP_D")}{print}' > sampleData/out.Alpha.4.csv

>>> rm sampleData/out.Alpha.4.*.csv

=============Finish=============


+ ./BitEpi.o -i sampleData/data.csv -o sampleData/out -t 2 -best

=============Start=============




=========================================

 Given Arguments:

 input                sampleData/data.csv
 output               sampleData/out
 threads              2
 best

=========================================


loading dataset sampleData/data.csv
Counting lines in sampleData/data.csv

There are       51 lines    in sampleData/data.csv
There are       50 SNPs     in sampleData/data.csv
There are     4000 samples  in sampleData/data.csv
There are     2000 Cases    in sampleData/data.csv
There are     2000 Controls in sampleData/data.csv

Purity of the whole dataset is 0.500000 (baseline for Beta)

Shift dataset by 2 bits compeleted
Shift dataset by 4 bits compeleted
Shift dataset by 6 bits compeleted

>>>>>>>>>> Process jobs [0..1] in parallel of 1th order analysis

>>>>> Identify the index range of the outer-loop for each job such that each job tests the same number of combinations (approximately)
Total number of combinations to be tested:                                   50
Average number of combintions to be tested in each job:                      25


         Job ID          Start            End   Combinations (to be tested in this job)
              0              0              7             28
              1              8             49             22
<<<<<
Thread    0 Job    0 starting ... [from:              0 to:              7][             28 combinations]
Thread    0 Finish
Thread    1 Job    1 starting ... [from:              8 to:             49][             22 combinations]
Thread    1 Finish
<<<<<<<<< Takes          0 seconds



>>>>>>>>>> Process jobs [0..1] in parallel of 2th order analysis

>>>>> Identify the index range of the outer-loop for each job such that each job tests the same number of combinations (approximately)
Total number of combinations to be tested:                                 1225
Average number of combintions to be tested in each job:                     612


         Job ID          Start            End   Combinations (to be tested in this job)
              0              1             34            595
              1             35             49            630
<<<<<
Thread    0 Job    0 starting ... [from:              1 to:             34][            595 combinations]
Thread    0 Finish
Thread    1 Job    1 starting ... [from:             35 to:             49][            630 combinations]
Thread    1 Finish
<<<<<<<<< Takes          0 seconds



>>>>>>>>>> Process jobs [0..1] in parallel of 3th order analysis

>>>>> Identify the index range of the outer-loop for each job such that each job tests the same number of combinations (approximately)
Total number of combinations to be tested:                                19600
Average number of combintions to be tested in each job:                    9800


         Job ID          Start            End   Combinations (to be tested in this job)
              0              2             39           9881
              1             40             49           9719
<<<<<
Thread    0 Job    0 starting ... [from:              2 to:             39][           9881 combinations]
Thread    1 Job    1 starting ... [from:             40 to:             49][           9719 combinations]
Thread    1 Finish
Thread    0 Finish
<<<<<<<<< Takes          0 seconds



>>>>>>>>>> Process jobs [0..1] in parallel of 4th order analysis

>>>>> Identify the index range of the outer-loop for each job such that each job tests the same number of combinations (approximately)
Total number of combinations to be tested:                               230300
Average number of combintions to be tested in each job:                  115150


         Job ID          Start            End   Combinations (to be tested in this job)
              0              3             41         111932
              1             42             49         118368
<<<<<
Thread    0 Job    0 starting ... [from:              3 to:             41][         111932 combinations]
Thread    1 Job    1 starting ... [from:             42 to:             49][         118368 combinations]
Thread    1 Finish
Thread    0 Finish
<<<<<<<<< Takes          1 seconds



***Merge output of multiple threads (stored in separate files). In Linux it uses command line operation (also echo commands in stdout). In Windows it only merge the best output file.


=============Finish=============


+ set +x
>>>>>>> Output files
-rw-rw-r-- 1 arash arash     661 Oct 25 15:33 sampleData/out.Alpha.1.csv
-rw-rw-r-- 1 arash arash   20010 Oct 25 15:33 sampleData/out.Alpha.2.csv
-rw-rw-r-- 1 arash arash  364321 Oct 25 15:33 sampleData/out.Alpha.3.csv
-rw-rw-r-- 1 arash arash 4489515 Oct 25 15:33 sampleData/out.Alpha.4.csv
-rw-rw-r-- 1 arash arash    5199 Oct 25 15:33 sampleData/out.best.csv
-rw-rw-r-- 1 arash arash     661 Oct 25 15:33 sampleData/out.Beta.1.csv
-rw-rw-r-- 1 arash arash   20010 Oct 25 15:33 sampleData/out.Beta.2.csv
-rw-rw-r-- 1 arash arash  364321 Oct 25 15:33 sampleData/out.Beta.3.csv
-rw-rw-r-- 1 arash arash 4489515 Oct 25 15:33 sampleData/out.Beta.4.csv
<<<<<<<<<<<<<<<<<<<<
